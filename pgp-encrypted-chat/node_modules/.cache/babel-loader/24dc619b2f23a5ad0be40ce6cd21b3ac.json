{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/Dashboard/Inbox.jsx\";\nimport React, { useState } from 'react';\nimport { Box, Paper, Typography, List, ListItem, ListItemText, TextField, Button, Alert, Divider, CircularProgress } from '@mui/material';\nimport { decryptMessage } from '../../services/cryptoService';\nconst Inbox = ({\n  messages,\n  currentUser,\n  keyPair\n}) => {\n  const [selectedMessage, setSelectedMessage] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const [decryptedContent, setDecryptedContent] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [verification, setVerification] = useState({\n    verified: false,\n    checked: false\n  });\n\n  // Filter messages for current user\n  const userMessages = currentUser ? messages.filter(msg => msg.to && msg.to.id === currentUser.id) : [];\n  const handleDecrypt = async () => {\n    if (!keyPair.privateKey) {\n      setError('You need to generate a key pair first');\n      return;\n    }\n    if (!selectedMessage.from.publicKey) {\n      setError(\"The sender hasn't generated a public key, so signature verification isn't possible\");\n    }\n    try {\n      setLoading(true);\n      setError('');\n\n      // Pass the sender's public key for signature verification\n      const result = await decryptMessage(selectedMessage.encryptedContent, keyPair.privateKey, passphrase, selectedMessage.from.publicKey // Add sender's public key here\n      );\n      if (result.success) {\n        setDecryptedContent(result.decryptedMessage);\n        setVerification({\n          verified: result.verified,\n          checked: true\n        });\n      } else {\n        setError(result.error || 'Failed to decrypt message');\n      }\n    } catch (err) {\n      setError('Error: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, !currentUser ? /*#__PURE__*/React.createElement(Alert, {\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Please select a user from the sidebar first\") : !keyPair.privateKey ? /*#__PURE__*/React.createElement(Alert, {\n    severity: \"warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Generate keys first to decrypt messages\") : userMessages.length === 0 ? /*#__PURE__*/React.createElement(Alert, {\n    severity: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"No messages in your inbox\") : /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"Your Messages\"), /*#__PURE__*/React.createElement(List, {\n    dense: true,\n    sx: {\n      bgcolor: 'background.paper',\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, userMessages.map((message, index) => /*#__PURE__*/React.createElement(ListItem, {\n    key: index,\n    button: true,\n    onClick: () => {\n      setSelectedMessage(message);\n      setDecryptedContent('');\n      setError('');\n    },\n    selected: selectedMessage === message,\n    divider: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: `From: ${message.from.name}`,\n    secondary: message.date ? message.date.toLocaleString() : 'Unknown date',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  })))), selectedMessage && /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, \"Decrypt Message with Your Private Key\"), /*#__PURE__*/React.createElement(Alert, {\n    severity: \"info\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, \"Your private key will decrypt this message. Enter your passphrase to unlock your private key.\"), /*#__PURE__*/React.createElement(TextField, {\n    type: \"password\",\n    label: \"Passphrase to unlock your private key\",\n    value: passphrase,\n    onChange: e => setPassphrase(e.target.value),\n    fullWidth: true,\n    margin: \"normal\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: handleDecrypt,\n    disabled: loading || !passphrase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 28\n    }\n  }) : 'Decrypt with Private Key'), error && /*#__PURE__*/React.createElement(Alert, {\n    severity: \"error\",\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, error), decryptedContent && /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Divider, {\n    sx: {\n      my: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }\n  }, \"Decrypted Message:\"), /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    sx: {\n      p: 2,\n      mt: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    sx: {\n      fontFamily: 'monospace',\n      whiteSpace: 'pre-wrap',\n      wordBreak: 'break-word'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, decryptedContent)), verification.checked && /*#__PURE__*/React.createElement(Alert, {\n    severity: verification.verified ? \"success\" : \"info\",\n    sx: {\n      mt: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, verification.verified ? \"Message signature verified! The sender's identity is confirmed.\" : \"Message was not signed or signature could not be verified.\")))));\n};\nexport default Inbox;","map":{"version":3,"names":["React","useState","Box","Paper","Typography","List","ListItem","ListItemText","TextField","Button","Alert","Divider","CircularProgress","decryptMessage","Inbox","messages","currentUser","keyPair","selectedMessage","setSelectedMessage","passphrase","setPassphrase","decryptedContent","setDecryptedContent","error","setError","loading","setLoading","verification","setVerification","verified","checked","userMessages","filter","msg","to","id","handleDecrypt","privateKey","from","publicKey","result","encryptedContent","success","decryptedMessage","err","message","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","severity","length","variant","gutterBottom","dense","sx","bgcolor","mb","map","index","key","button","onClick","selected","divider","primary","name","secondary","date","toLocaleString","type","label","value","onChange","e","target","fullWidth","margin","size","disabled","mt","my","p","fontFamily","whiteSpace","wordBreak"],"sources":["/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/Dashboard/Inbox.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { \n  Box, \n  Paper, \n  Typography, \n  List, \n  ListItem, \n  ListItemText,\n  TextField,\n  Button,\n  Alert,\n  Divider,\n  CircularProgress\n} from '@mui/material';\nimport { decryptMessage } from '../../services/cryptoService';\n\nconst Inbox = ({ messages, currentUser, keyPair }) => {\n  const [selectedMessage, setSelectedMessage] = useState(null);\n  const [passphrase, setPassphrase] = useState('');\n  const [decryptedContent, setDecryptedContent] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [verification, setVerification] = useState({ verified: false, checked: false });\n  \n  // Filter messages for current user\n  const userMessages = currentUser \n    ? messages.filter(msg => msg.to && msg.to.id === currentUser.id)\n    : [];\n    \n    const handleDecrypt = async () => {\n        if (!keyPair.privateKey) {\n          setError('You need to generate a key pair first');\n          return;\n        }\n        \n        if (!selectedMessage.from.publicKey) {\n          setError(\"The sender hasn't generated a public key, so signature verification isn't possible\");\n        }\n        \n        try {\n          setLoading(true);\n          setError('');\n          \n          // Pass the sender's public key for signature verification\n          const result = await decryptMessage(\n            selectedMessage.encryptedContent,\n            keyPair.privateKey,\n            passphrase,\n            selectedMessage.from.publicKey // Add sender's public key here\n          );\n          \n          if (result.success) {\n            setDecryptedContent(result.decryptedMessage);\n            setVerification({ verified: result.verified, checked: true });\n          } else {\n            setError(result.error || 'Failed to decrypt message');\n          }\n        } catch (err) {\n          setError('Error: ' + err.message);\n        } finally {\n          setLoading(false);\n        }\n     };\n  \n  return (\n    <Box>\n      {!currentUser ? (\n        <Alert severity=\"info\">\n          Please select a user from the sidebar first\n        </Alert>\n      ) : !keyPair.privateKey ? (\n        <Alert severity=\"warning\">\n          Generate keys first to decrypt messages\n        </Alert>\n      ) : userMessages.length === 0 ? (\n        <Alert severity=\"info\">No messages in your inbox</Alert>\n      ) : (\n        <Box>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Your Messages\n          </Typography>\n          \n          <List dense sx={{ bgcolor: 'background.paper', mb: 2 }}>\n            {userMessages.map((message, index) => (\n              <ListItem \n                key={index} \n                button \n                onClick={() => {\n                  setSelectedMessage(message);\n                  setDecryptedContent('');\n                  setError('');\n                }}\n                selected={selectedMessage === message}\n                divider\n              >\n                <ListItemText\n                  primary={`From: ${message.from.name}`}\n                  secondary={message.date ? message.date.toLocaleString() : 'Unknown date'}\n                />\n              </ListItem>\n            ))}\n          </List>\n          \n          {selectedMessage && (\n            <Box>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Decrypt Message with Your Private Key\n              </Typography>\n              \n              <Alert severity=\"info\" sx={{ mb: 2 }}>\n                Your private key will decrypt this message. Enter your passphrase to unlock your private key.\n              </Alert>\n              \n              <TextField\n                type=\"password\"\n                label=\"Passphrase to unlock your private key\"\n                value={passphrase}\n                onChange={(e) => setPassphrase(e.target.value)}\n                fullWidth\n                margin=\"normal\"\n                size=\"small\"\n              />\n              \n              <Button\n                variant=\"contained\"\n                onClick={handleDecrypt}\n                disabled={loading || !passphrase}\n              >\n                {loading ? <CircularProgress size={24} /> : 'Decrypt with Private Key'}\n              </Button>\n              \n              {error && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                  {error}\n                </Alert>\n              )}\n              \n              {decryptedContent && (\n                <Box sx={{ mt: 2 }}>\n                  <Divider sx={{ my: 2 }} />\n                  <Typography variant=\"subtitle2\">Decrypted Message:</Typography>\n                  <Paper variant=\"outlined\" sx={{ p: 2, mt: 1 }}>\n                    <Typography sx={{ fontFamily: 'monospace', whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>\n                       {decryptedContent}\n                     </Typography>\n                 </Paper>\n                  \n                  {verification.checked && (\n                    <Alert \n                      severity={verification.verified ? \"success\" : \"info\"} \n                      sx={{ mt: 1 }}\n                    >\n                      {verification.verified \n                        ? \"Message signature verified! The sender's identity is confirmed.\" \n                        : \"Message was not signed or signature could not be verified.\"}\n                    </Alert>\n                  )}\n                </Box>\n              )}\n            </Box>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Inbox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}