{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/App.jsx\";\nimport React, { useState } from 'react';\nimport Layout from './Layout';\nimport users from '../data/users';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2'\n    },\n    secondary: {\n      main: '#dc004e'\n    },\n    background: {\n      default: '#f5f5f5'\n    }\n  }\n});\nconst App = () => {\n  // State for users with their associated keys\n  const [usersState, setUsersState] = useState(users);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [selectedRecipient, setSelectedRecipient] = useState(null);\n\n  // Modified function to handle user selection and get their current keys\n  const handleSelectUser = user => {\n    setCurrentUser(user);\n    // Reset recipient if we select the same user\n    if (selectedRecipient && selectedRecipient.id === user.id) {\n      setSelectedRecipient(null);\n    }\n  };\n\n  // Update user's key pair\n  const updateUserKeyPair = (userId, publicKey, privateKey) => {\n    setUsersState(prevUsers => prevUsers.map(user => user.id === userId ? {\n      ...user,\n      publicKey,\n      privateKey\n    } : user));\n\n    // Also update current user if it's the same one\n    if (currentUser && currentUser.id === userId) {\n      setCurrentUser(prev => ({\n        ...prev,\n        publicKey,\n        privateKey\n      }));\n    }\n  };\n\n  // Function to add a new message to the inbox\n  const addMessage = message => {\n    setMessages([...messages, message]);\n  };\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Layout, {\n    users: usersState,\n    currentUser: currentUser,\n    setCurrentUser: handleSelectUser,\n    updateUserKeyPair: updateUserKeyPair,\n    messages: messages,\n    addMessage: addMessage,\n    selectedRecipient: selectedRecipient,\n    setSelectedRecipient: setSelectedRecipient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }));\n};\nexport default App;","map":{"version":3,"names":["React","useState","Layout","users","createTheme","ThemeProvider","CssBaseline","theme","palette","primary","main","secondary","background","default","App","usersState","setUsersState","currentUser","setCurrentUser","messages","setMessages","selectedRecipient","setSelectedRecipient","handleSelectUser","user","id","updateUserKeyPair","userId","publicKey","privateKey","prevUsers","map","prev","addMessage","message","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Layout from './Layout';\nimport users from '../data/users';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n});\n\nconst App = () => {\n  // State for users with their associated keys\n  const [usersState, setUsersState] = useState(users);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [selectedRecipient, setSelectedRecipient] = useState(null);\n  \n  // Modified function to handle user selection and get their current keys\n  const handleSelectUser = (user) => {\n    setCurrentUser(user);\n    // Reset recipient if we select the same user\n    if (selectedRecipient && selectedRecipient.id === user.id) {\n      setSelectedRecipient(null);\n    }\n  };\n  \n  // Update user's key pair\n  const updateUserKeyPair = (userId, publicKey, privateKey) => {\n    setUsersState(prevUsers => \n      prevUsers.map(user => \n        user.id === userId \n          ? { ...user, publicKey, privateKey }\n          : user\n      )\n    );\n    \n    // Also update current user if it's the same one\n    if (currentUser && currentUser.id === userId) {\n      setCurrentUser(prev => ({ ...prev, publicKey, privateKey }));\n    }\n  };\n  \n  // Function to add a new message to the inbox\n  const addMessage = (message) => {\n    setMessages([...messages, message]);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Layout \n        users={usersState}\n        currentUser={currentUser}\n        setCurrentUser={handleSelectUser}\n        updateUserKeyPair={updateUserKeyPair}\n        messages={messages}\n        addMessage={addMessage}\n        selectedRecipient={selectedRecipient}\n        setSelectedRecipient={setSelectedRecipient}\n      />\n    </ThemeProvider>\n  );\n};\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,eAAe;AACjC,SAASC,WAAW,EAAEC,aAAa,QAAQ,sBAAsB;AACjE,OAAOC,WAAW,MAAM,2BAA2B;AAEnD,MAAMC,KAAK,GAAGH,WAAW,CAAC;EACxBI,OAAO,EAAE;IACPC,OAAO,EAAE;MACPC,IAAI,EAAE;IACR,CAAC;IACDC,SAAS,EAAE;MACTD,IAAI,EAAE;IACR,CAAC;IACDE,UAAU,EAAE;MACVC,OAAO,EAAE;IACX;EACF;AACF,CAAC,CAAC;AAEF,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAACE,KAAK,CAAC;EACnD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACoB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;;EAEhE;EACA,MAAMsB,gBAAgB,GAAIC,IAAI,IAAK;IACjCN,cAAc,CAACM,IAAI,CAAC;IACpB;IACA,IAAIH,iBAAiB,IAAIA,iBAAiB,CAACI,EAAE,KAAKD,IAAI,CAACC,EAAE,EAAE;MACzDH,oBAAoB,CAAC,IAAI,CAAC;IAC5B;EACF,CAAC;;EAED;EACA,MAAMI,iBAAiB,GAAGA,CAACC,MAAM,EAAEC,SAAS,EAAEC,UAAU,KAAK;IAC3Db,aAAa,CAACc,SAAS,IACrBA,SAAS,CAACC,GAAG,CAACP,IAAI,IAChBA,IAAI,CAACC,EAAE,KAAKE,MAAM,GACd;MAAE,GAAGH,IAAI;MAAEI,SAAS;MAAEC;IAAW,CAAC,GAClCL,IACN,CACF,CAAC;;IAED;IACA,IAAIP,WAAW,IAAIA,WAAW,CAACQ,EAAE,KAAKE,MAAM,EAAE;MAC5CT,cAAc,CAACc,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEJ,SAAS;QAAEC;MAAW,CAAC,CAAC,CAAC;IAC9D;EACF,CAAC;;EAED;EACA,MAAMI,UAAU,GAAIC,OAAO,IAAK;IAC9Bd,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEe,OAAO,CAAC,CAAC;EACrC,CAAC;EAED,oBACElC,KAAA,CAAAmC,aAAA,CAAC9B,aAAa;IAACE,KAAK,EAAEA,KAAM;IAAA6B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC1BzC,KAAA,CAAAmC,aAAA,CAAC7B,WAAW;IAAA8B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACfzC,KAAA,CAAAmC,aAAA,CAACjC,MAAM;IACLC,KAAK,EAAEY,UAAW;IAClBE,WAAW,EAAEA,WAAY;IACzBC,cAAc,EAAEK,gBAAiB;IACjCG,iBAAiB,EAAEA,iBAAkB;IACrCP,QAAQ,EAAEA,QAAS;IACnBc,UAAU,EAAEA,UAAW;IACvBZ,iBAAiB,EAAEA,iBAAkB;IACrCC,oBAAoB,EAAEA,oBAAqB;IAAAc,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC5C,CACY,CAAC;AAEpB,CAAC;AAED,eAAe3B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}