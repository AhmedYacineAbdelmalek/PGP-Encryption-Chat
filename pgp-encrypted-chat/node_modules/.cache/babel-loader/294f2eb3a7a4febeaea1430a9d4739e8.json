{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/Dashboard/KeyManager.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Button, Alert, Typography, Box, CircularProgress, Paper, FormControl, InputLabel, OutlinedInput, InputAdornment, IconButton, FormHelperText, Card, CardContent, Divider } from '@mui/material';\nimport { Visibility, VisibilityOff, Key } from '@mui/icons-material';\nimport { generateKeyPair } from '../../services/cryptoService';\nconst KeyManager = ({\n  currentUser,\n  updateUserKeyPair\n}) => {\n  const [passphrase, setPassphrase] = useState('');\n  const [confirmPassphrase, setConfirmPassphrase] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [showPassphrase, setShowPassphrase] = useState(false);\n  const [showStoredPassphrase, setShowStoredPassphrase] = useState(false);\n\n  // Reset state when user changes\n  useEffect(() => {\n    setPassphrase('');\n    setConfirmPassphrase('');\n    setError('');\n    setSuccess(false);\n    setShowStoredPassphrase(false);\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const handlePassphraseChange = e => {\n    setPassphrase(e.target.value);\n    setError('');\n  };\n  const handleConfirmPassphraseChange = e => {\n    setConfirmPassphrase(e.target.value);\n    setError('');\n  };\n  const handleClickShowPassphrase = () => {\n    setShowPassphrase(!showPassphrase);\n  };\n  const handleToggleStoredPassphrase = () => {\n    setShowStoredPassphrase(!showStoredPassphrase);\n  };\n  const handleGenerateKeys = async () => {\n    if (!currentUser) {\n      setError('Please select a user first');\n      return;\n    }\n    if (passphrase.length < 8) {\n      setError('Passphrase must be at least 8 characters long');\n      return;\n    }\n    if (passphrase !== confirmPassphrase) {\n      setError('Passphrases do not match');\n      return;\n    }\n    try {\n      setLoading(true);\n      setError('');\n      setSuccess(false);\n      const {\n        name,\n        email\n      } = currentUser;\n      const result = await generateKeyPair(name, email, passphrase);\n      if (result.success) {\n        updateUserKeyPair(currentUser.id, result.publicKey, result.privateKey, passphrase // Store passphrase with user\n        );\n        setSuccess(true);\n      } else {\n        setError(result.error || 'Failed to generate keys');\n      }\n    } catch (err) {\n      setError('An error occurred: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Generate a public/private key pair for secure communication. The passphrase will be used to protect your private key.\"), currentUser.publicKey ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Alert, {\n    severity: \"success\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"You already have a key pair generated\"), /*#__PURE__*/React.createElement(Card, {\n    variant: \"outlined\",\n    sx: {\n      mb: 2,\n      bgcolor: 'rgba(76, 175, 80, 0.08)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    sx: {\n      mb: 1,\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Key, {\n    sx: {\n      mr: 1,\n      fontSize: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }), \"Your Saved Passphrase\"), /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    variant: \"outlined\",\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(OutlinedInput, {\n    type: showStoredPassphrase ? 'text' : 'password',\n    value: currentUser.passphrase || '',\n    readOnly: true,\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: handleToggleStoredPassphrase,\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }\n    }, showStoredPassphrase ? /*#__PURE__*/React.createElement(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 49\n      }\n    }) : /*#__PURE__*/React.createElement(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 69\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, \"You'll need this passphrase to use your private key\"))))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    variant: \"outlined\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: \"passphrase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"Passphrase\"), /*#__PURE__*/React.createElement(OutlinedInput, {\n    id: \"passphrase\",\n    type: showPassphrase ? 'text' : 'password',\n    value: passphrase,\n    onChange: handlePassphraseChange,\n    disabled: loading,\n    endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n      position: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: handleClickShowPassphrase,\n      edge: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 19\n      }\n    }, showPassphrase ? /*#__PURE__*/React.createElement(VisibilityOff, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 39\n      }\n    }) : /*#__PURE__*/React.createElement(Visibility, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 59\n      }\n    }))),\n    label: \"Passphrase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormHelperText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"Use a strong passphrase (at least 8 characters)\")), /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    type: \"password\",\n    label: \"Confirm Passphrase\",\n    variant: \"outlined\",\n    value: confirmPassphrase,\n    onChange: handleConfirmPassphraseChange,\n    disabled: loading,\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleGenerateKeys,\n    disabled: loading || !passphrase,\n    fullWidth: true,\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 24\n    }\n  }) : 'Generate Key Pair')), error && /*#__PURE__*/React.createElement(Alert, {\n    severity: \"error\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, error), success && /*#__PURE__*/React.createElement(Alert, {\n    severity: \"success\",\n    sx: {\n      mb: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 19\n    }\n  }, \"Key pair generated successfully!\"), currentUser.publicKey && /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    sx: {\n      p: 2,\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    sx: {\n      mb: 1,\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, \"Your Public Key\"), /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    multiline: true,\n    rows: 6,\n    value: currentUser.publicKey // Show full key, not truncated\n    ,\n    variant: \"outlined\",\n    InputProps: {\n      readOnly: true,\n      sx: {\n        fontFamily: 'monospace',\n        fontSize: '0.75rem'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"text.secondary\",\n    sx: {\n      mt: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, \"Your public key can be shared with others to receive encrypted messages.\")), currentUser.privateKey && /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    sx: {\n      p: 2,\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    sx: {\n      mb: 1,\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 11\n    }\n  }, \"Your Private Key (keep secret!)\"), /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    multiline: true,\n    rows: 6,\n    value: currentUser.privateKey // Show full key, not truncated\n    ,\n    variant: \"outlined\",\n    InputProps: {\n      readOnly: true,\n      sx: {\n        fontFamily: 'monospace',\n        fontSize: '0.75rem'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"text.secondary\",\n    sx: {\n      mt: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, \"Never share your private key! It's used to decrypt messages sent to you and to sign messages you send.\")), /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Divider, {\n    sx: {\n      my: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, \"About PGP Keys:\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"text.secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, \"In PGP encryption, your private key is used both for decrypting messages sent to you and for signing messages you send to others. The passphrase doesn't decrypt messages directly - it unlocks your private key, which then decrypts the messages.\")));\n};\nexport default KeyManager;","map":{"version":3,"names":["React","useState","useEffect","TextField","Button","Alert","Typography","Box","CircularProgress","Paper","FormControl","InputLabel","OutlinedInput","InputAdornment","IconButton","FormHelperText","Card","CardContent","Divider","Visibility","VisibilityOff","Key","generateKeyPair","KeyManager","currentUser","updateUserKeyPair","passphrase","setPassphrase","confirmPassphrase","setConfirmPassphrase","loading","setLoading","error","setError","success","setSuccess","showPassphrase","setShowPassphrase","showStoredPassphrase","setShowStoredPassphrase","id","handlePassphraseChange","e","target","value","handleConfirmPassphraseChange","handleClickShowPassphrase","handleToggleStoredPassphrase","handleGenerateKeys","length","name","email","result","publicKey","privateKey","err","message","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","variant","sx","mb","Fragment","severity","bgcolor","display","alignItems","mr","fontSize","fullWidth","size","type","readOnly","endAdornment","position","onClick","edge","htmlFor","onChange","disabled","label","color","p","mt","fontWeight","multiline","rows","InputProps","fontFamily","my","gutterBottom"],"sources":["/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/Dashboard/KeyManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  TextField, \n  Button, \n  Alert, \n  Typography,\n  Box,\n  CircularProgress,\n  Paper,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n  FormHelperText,\n  Card,\n  CardContent,\n  Divider\n} from '@mui/material';\nimport { Visibility, VisibilityOff, Key } from '@mui/icons-material';\nimport { generateKeyPair } from '../../services/cryptoService';\n\nconst KeyManager = ({ currentUser, updateUserKeyPair }) => {\n  const [passphrase, setPassphrase] = useState('');\n  const [confirmPassphrase, setConfirmPassphrase] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [showPassphrase, setShowPassphrase] = useState(false);\n  const [showStoredPassphrase, setShowStoredPassphrase] = useState(false);\n  \n  // Reset state when user changes\n  useEffect(() => {\n    setPassphrase('');\n    setConfirmPassphrase('');\n    setError('');\n    setSuccess(false);\n    setShowStoredPassphrase(false);\n  }, [currentUser?.id]);\n  \n  const handlePassphraseChange = (e) => {\n    setPassphrase(e.target.value);\n    setError('');\n  };\n  \n  const handleConfirmPassphraseChange = (e) => {\n    setConfirmPassphrase(e.target.value);\n    setError('');\n  };\n  \n  const handleClickShowPassphrase = () => {\n    setShowPassphrase(!showPassphrase);\n  };\n\n  const handleToggleStoredPassphrase = () => {\n    setShowStoredPassphrase(!showStoredPassphrase);\n  };\n  \n  const handleGenerateKeys = async () => {\n    if (!currentUser) {\n      setError('Please select a user first');\n      return;\n    }\n    \n    if (passphrase.length < 8) {\n      setError('Passphrase must be at least 8 characters long');\n      return;\n    }\n    \n    if (passphrase !== confirmPassphrase) {\n      setError('Passphrases do not match');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      setError('');\n      setSuccess(false);\n      \n      const { name, email } = currentUser;\n      const result = await generateKeyPair(name, email, passphrase);\n      \n      if (result.success) {\n        updateUserKeyPair(\n          currentUser.id, \n          result.publicKey, \n          result.privateKey,\n          passphrase // Store passphrase with user\n        );\n        setSuccess(true);\n      } else {\n        setError(result.error || 'Failed to generate keys');\n      }\n    } catch (err) {\n      setError('An error occurred: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <Box>\n      <Typography variant=\"body2\" sx={{ mb: 2 }}>\n        Generate a public/private key pair for secure communication.\n        The passphrase will be used to protect your private key.\n      </Typography>\n      \n      {currentUser.publicKey ? (\n        <>\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\n            You already have a key pair generated\n          </Alert>\n          \n          {/* Display saved passphrase */}\n          <Card variant=\"outlined\" sx={{ mb: 2, bgcolor: 'rgba(76, 175, 80, 0.08)' }}>\n            <CardContent>\n              <Typography variant=\"subtitle2\" sx={{ mb: 1, display: 'flex', alignItems: 'center' }}>\n                <Key sx={{ mr: 1, fontSize: 20 }} />\n                Your Saved Passphrase\n              </Typography>\n              \n              <FormControl fullWidth variant=\"outlined\" size=\"small\">\n                <OutlinedInput\n                  type={showStoredPassphrase ? 'text' : 'password'}\n                  value={currentUser.passphrase || ''}\n                  readOnly\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={handleToggleStoredPassphrase}\n                        edge=\"end\"\n                      >\n                        {showStoredPassphrase ? <VisibilityOff /> : <Visibility />}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n                <FormHelperText>\n                  You'll need this passphrase to use your private key\n                </FormHelperText>\n              </FormControl>\n            </CardContent>\n          </Card>\n        </>\n      ) : (\n        <>\n          <FormControl fullWidth variant=\"outlined\" sx={{ mb: 2 }}>\n            <InputLabel htmlFor=\"passphrase\">Passphrase</InputLabel>\n            <OutlinedInput\n              id=\"passphrase\"\n              type={showPassphrase ? 'text' : 'password'}\n              value={passphrase}\n              onChange={handlePassphraseChange}\n              disabled={loading}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    onClick={handleClickShowPassphrase}\n                    edge=\"end\"\n                  >\n                    {showPassphrase ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                </InputAdornment>\n              }\n              label=\"Passphrase\"\n            />\n            <FormHelperText>\n              Use a strong passphrase (at least 8 characters)\n            </FormHelperText>\n          </FormControl>\n          \n          <TextField\n            fullWidth\n            type=\"password\"\n            label=\"Confirm Passphrase\"\n            variant=\"outlined\"\n            value={confirmPassphrase}\n            onChange={handleConfirmPassphraseChange}\n            disabled={loading}\n            sx={{ mb: 2 }}\n          />\n          \n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleGenerateKeys}\n            disabled={loading || !passphrase}\n            fullWidth\n            sx={{ mb: 2 }}\n          >\n            {loading ? <CircularProgress size={24} /> : 'Generate Key Pair'}\n          </Button>\n        </>\n      )}\n      \n      {error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}\n      {success && <Alert severity=\"success\" sx={{ mb: 2 }}>Key pair generated successfully!</Alert>}\n      \n      {currentUser.publicKey && (\n        <Paper variant=\"outlined\" sx={{ p: 2, mt: 2 }}>\n          <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 'bold' }}>\n            Your Public Key\n          </Typography>\n          <TextField\n            fullWidth\n            multiline\n            rows={6}\n            value={currentUser.publicKey} // Show full key, not truncated\n            variant=\"outlined\"\n            InputProps={{\n              readOnly: true,\n              sx: { fontFamily: 'monospace', fontSize: '0.75rem' }\n            }}\n          />\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Your public key can be shared with others to receive encrypted messages.\n          </Typography>\n        </Paper>\n      )}\n      \n      {currentUser.privateKey && (\n        <Paper variant=\"outlined\" sx={{ p: 2, mt: 2 }}>\n          <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 'bold' }}>\n            Your Private Key (keep secret!)\n          </Typography>\n          <TextField\n            fullWidth\n            multiline\n            rows={6}\n            value={currentUser.privateKey} // Show full key, not truncated\n            variant=\"outlined\"\n            InputProps={{\n              readOnly: true,\n              sx: { fontFamily: 'monospace', fontSize: '0.75rem' }\n            }}\n          />\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Never share your private key! It's used to decrypt messages sent to you\n            and to sign messages you send.\n          </Typography>\n        </Paper>\n      )}\n      \n      <Box sx={{ mt: 2 }}>\n        <Divider sx={{ my: 2 }} />\n        <Typography variant=\"subtitle2\" gutterBottom>\n          About PGP Keys:\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          In PGP encryption, your private key is used both for decrypting messages sent to you \n          and for signing messages you send to others. The passphrase doesn't decrypt messages directly - \n          it unlocks your private key, which then decrypts the messages.\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default KeyManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}