{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/App.jsx\";\nimport React, { useState } from 'react';\nimport Layout from './Layout';\nimport users from '../data/users';\nimport { ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport getTheme from '../theme';\nconst App = () => {\n  // State for dark/light mode\n  const [themeMode, setThemeMode] = useState('light');\n\n  // State for storing user's keys and current selection\n  const [usersState, setUsersState] = useState(users);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [selectedRecipient, setSelectedRecipient] = useState(null);\n\n  // Function to toggle dark/light theme\n  const toggleTheme = () => {\n    setThemeMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n\n  // Modified function to handle user selection and get their current keys\n  const handleSelectUser = user => {\n    setCurrentUser(user);\n    // Reset recipient if we select the same user\n    if (selectedRecipient && selectedRecipient.id === user.id) {\n      setSelectedRecipient(null);\n    }\n  };\n\n  // Update user's key pair\n  const updateUserKeyPair = (userId, publicKey, privateKey, passphrase) => {\n    setUsersState(prevUsers => prevUsers.map(user => user.id === userId ? {\n      ...user,\n      publicKey,\n      privateKey,\n      passphrase\n    } : user));\n\n    // Also update current user if it's the same one\n    if (currentUser && currentUser.id === userId) {\n      setCurrentUser(prev => ({\n        ...prev,\n        publicKey,\n        privateKey,\n        passphrase\n      }));\n    }\n  };\n\n  // Function to add a new message to the inbox\n  const addMessage = message => {\n    setMessages([...messages, message]);\n  };\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: getTheme(themeMode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Layout, {\n    users: usersState,\n    currentUser: currentUser,\n    setCurrentUser: handleSelectUser,\n    updateUserKeyPair: updateUserKeyPair,\n    messages: messages,\n    addMessage: addMessage,\n    selectedRecipient: selectedRecipient,\n    setSelectedRecipient: setSelectedRecipient,\n    toggleTheme: toggleTheme,\n    themeMode: themeMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\nexport default App;","map":{"version":3,"names":["React","useState","Layout","users","ThemeProvider","CssBaseline","getTheme","App","themeMode","setThemeMode","usersState","setUsersState","currentUser","setCurrentUser","messages","setMessages","selectedRecipient","setSelectedRecipient","toggleTheme","prevMode","handleSelectUser","user","id","updateUserKeyPair","userId","publicKey","privateKey","passphrase","prevUsers","map","prev","addMessage","message","createElement","theme","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/workspaces/codespaces-blank/pgp-encrypted-chat/src/components/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport Layout from './Layout';\nimport users from '../data/users';\nimport { ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport getTheme from '../theme';\n\nconst App = () => {\n  // State for dark/light mode\n  const [themeMode, setThemeMode] = useState('light');\n  \n  // State for storing user's keys and current selection\n  const [usersState, setUsersState] = useState(users);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [selectedRecipient, setSelectedRecipient] = useState(null);\n  \n  // Function to toggle dark/light theme\n  const toggleTheme = () => {\n    setThemeMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n  \n  // Modified function to handle user selection and get their current keys\n  const handleSelectUser = (user) => {\n    setCurrentUser(user);\n    // Reset recipient if we select the same user\n    if (selectedRecipient && selectedRecipient.id === user.id) {\n      setSelectedRecipient(null);\n    }\n  };\n  \n  // Update user's key pair\n  const updateUserKeyPair = (userId, publicKey, privateKey, passphrase) => {\n    setUsersState(prevUsers => \n      prevUsers.map(user => \n        user.id === userId \n          ? { ...user, publicKey, privateKey, passphrase }\n          : user\n      )\n    );\n    \n    // Also update current user if it's the same one\n    if (currentUser && currentUser.id === userId) {\n      setCurrentUser(prev => ({ ...prev, publicKey, privateKey, passphrase }));\n    }\n  };\n  \n  // Function to add a new message to the inbox\n  const addMessage = (message) => {\n    setMessages([...messages, message]);\n  };\n\n  return (\n    <ThemeProvider theme={getTheme(themeMode)}>\n      <CssBaseline />\n      <Layout \n        users={usersState}\n        currentUser={currentUser}\n        setCurrentUser={handleSelectUser}\n        updateUserKeyPair={updateUserKeyPair}\n        messages={messages}\n        addMessage={addMessage}\n        selectedRecipient={selectedRecipient}\n        setSelectedRecipient={setSelectedRecipient}\n        toggleTheme={toggleTheme}\n        themeMode={themeMode}\n      />\n    </ThemeProvider>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}